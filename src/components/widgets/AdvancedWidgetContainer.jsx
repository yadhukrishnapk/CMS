import React, { useState, useRef, useEffect } from 'react';
import { useSortable } from '@dnd-kit/sortable';
import { CSS } from '@dnd-kit/utilities';
import { useDroppable } from '@dnd-kit/core';
import useCMSStore from '../../store/useCMSStore';
import RichTextWidget from '../../widgets/RichTextWidget';
import ImageWidget from '../../widgets/ImageWidget';
import ButtonWidget from '../../widgets/ButtonWidget';
import HeadingWidget from '../../widgets/HeadingWidget';
import SpacerWidget from '../../widgets/SpacerWidget';
import DividerWidget from '../../widgets/DividerWidget';

const AdvancedWidgetContainer = ({ widget, isEditing = true, index = 0 }) => {
  const { selectedWidgetId, selectWidget, deleteWidget, updateWidget, addWidget } = useCMSStore();
  const [isHovered, setIsHovered] = useState(false);
  const [showDropZone, setShowDropZone] = useState(false);
  const containerRef = useRef(null);
  const isSelected = selectedWidgetId === widget.id;

  const {
    attributes,
    listeners,
    setNodeRef,
    transform,
    transition,
    isDragging,
  } = useSortable({ 
    id: widget.id,
    data: {
      type: 'widget',
      widget,
    }
  });

  const { setNodeRef: setDropRef, isOver } = useDroppable({
    id: `drop-${widget.id}`,
    data: {
      accepts: ['widget'],
    },
  });

  const style = {
    transform: CSS.Transform.toString(transform),
    transition,
    opacity: isDragging ? 0.5 : 1,
  };

  const handleSelect = (e) => {
    e.stopPropagation();
    selectWidget(widget.id);
  };

  const handleDelete = () => {
    if (confirm('Are you sure you want to delete this widget?')) {
      deleteWidget(widget.id);
    }
  };

  const handleUpdate = (updates) => {
    updateWidget(widget.id, { props: { ...widget.props, ...updates } });
  };

  const handleDuplicate = () => {
    const newWidget = {
      ...widget,
      id: undefined, // Will be generated by addWidget
    };
    // This would need to be implemented in the store
    console.log('Duplicate widget:', newWidget);
  };

  const renderWidget = () => {
    switch (widget.type) {
      case 'richText':
        return <RichTextWidget widget={widget} isEditing={isEditing} onUpdate={handleUpdate} />;
      case 'image':
        return <ImageWidget widget={widget} isEditing={isEditing} onUpdate={handleUpdate} />;
      case 'button':
        return <ButtonWidget widget={widget} isEditing={isEditing} onUpdate={handleUpdate} />;
      case 'heading':
        return <HeadingWidget widget={widget} isEditing={isEditing} onUpdate={handleUpdate} />;
      case 'spacer':
        return <SpacerWidget widget={widget} isEditing={isEditing} onUpdate={handleUpdate} />;
      case 'divider':
        return <DividerWidget widget={widget} isEditing={isEditing} onUpdate={handleUpdate} />;
      default:
        return <div className="p-4 text-gray-500">Unknown widget type: {widget.type}</div>;
    }
  };

  if (!isEditing) {
    return (
      <div className="w-full">
        {renderWidget()}
      </div>
    );
  }

  return (
    <div
      ref={(node) => {
        setNodeRef(node);
        setDropRef(node);
        containerRef.current = node;
      }}
      style={style}
      className={`widget-container relative group ${
        isSelected ? 'selected' : ''
      } ${isDragging ? 'dragging' : ''} ${isOver ? 'drop-active' : ''}`}
      onClick={handleSelect}
      onMouseEnter={() => setIsHovered(true)}
      onMouseLeave={() => setIsHovered(false)}
      {...attributes}
      {...listeners}
    >
      {/* Widget Overlay */}
      {isSelected && (
        <div className="widget-overlay">
          <div className="absolute top-2 left-2 bg-blue-500 text-white px-2 py-1 rounded text-xs font-medium">
            {widget.type}
          </div>
        </div>
      )}

      {/* Widget Actions */}
      <div className="widget-actions">
        <button
          onClick={(e) => {
            e.stopPropagation();
            handleDuplicate();
          }}
          className="p-1 bg-green-500 text-white rounded hover:bg-green-600 transition-colors"
          title="Duplicate widget"
        >
          📋
        </button>
        <button
          onClick={(e) => {
            e.stopPropagation();
            handleDelete();
          }}
          className="p-1 bg-red-500 text-white rounded hover:bg-red-600 transition-colors"
          title="Delete widget"
        >
          🗑️
        </button>
      </div>

      {/* Drop Zone Indicator */}
      {showDropZone && (
        <div className="absolute inset-0 border-2 border-dashed border-blue-400 bg-blue-100 bg-opacity-50 rounded-lg flex items-center justify-center">
          <span className="text-blue-600 font-medium">Drop here</span>
        </div>
      )}

      {/* Widget Content */}
      <div className="p-4">
        {renderWidget()}
      </div>

      {/* Widget Info */}
      {isHovered && (
        <div className="absolute bottom-2 left-2 bg-black bg-opacity-75 text-white px-2 py-1 rounded text-xs">
          {widget.type} • Click to edit
        </div>
      )}
    </div>
  );
};

export default AdvancedWidgetContainer;
